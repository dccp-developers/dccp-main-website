---
import "@fontsource/playfair-display";
import "@fontsource/inter";
import HeadSEO from "@/components/HeadSEO.astro";
import CollegeFooter from "@/components/CollegeFooter.astro";
import CollegeHeader from "@/components/CollegeHeader.astro";
import { ViewTransitions } from "astro:transitions";
import SpeedInsights from "@vercel/speed-insights/astro";
interface Props {
    title?: string | undefined;
    description?: string | undefined;
    ogImage?: URL | undefined;
}

const { title, description, ogImage } = Astro.props;
---

<html lang="en" class="scroll-smooth font-serif">
    <head>
        <HeadSEO title={title} description={description} ogImage={ogImage} />
        <ViewTransitions />
    </head>
    <body class="font-serif bg-background min-h-screen font-sans antialiased">
        <SpeedInsights />
        <div class="relative flex min-h-screen flex-col">
            <CollegeHeader />
            <main class="flex-auto">
                <slot />
            </main>
            <CollegeFooter />
        </div>

        <!-- Theme script to ensure theme functionality works throughout the site -->
        <script is:inline>
            const getThemePreference = () => {
                if (
                    typeof localStorage !== "undefined" &&
                    localStorage.getItem("theme")
                ) {
                    return localStorage.getItem("theme");
                }
                return "light"; // Default to light theme instead of using system preference
            };
            const isDark = getThemePreference() === "dark";
            document.documentElement.classList[isDark ? "add" : "remove"](
                "dark",
            );

            if (typeof localStorage !== "undefined") {
                const observer = new MutationObserver(() => {
                    const isDark =
                        document.documentElement.classList.contains("dark");
                    localStorage.setItem("theme", isDark ? "dark" : "light");
                });
                observer.observe(document.documentElement, {
                    attributes: true,
                    attributeFilter: ["class"],
                });
            }
        </script>
    </body>
</html>
