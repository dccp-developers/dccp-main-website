---
// Define the props for this component
interface TechStat {
  value: string;
  label: string;
  icon: string;
}

interface Props {
  stats: TechStat[];
}

const { stats } = Astro.props;

// Function to get icon SVG based on name
const getIconSvg = (iconName: string) => {
  switch(iconName) {
    case 'wifi':
      return `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 13a10 10 0 0 1 14 0"/><path d="M8.5 16.5a5 5 0 0 1 7 0"/><path d="M2 8.82a15 15 0 0 1 20 0"/><line x1="12" x2="12.01" y1="20" y2="20"/></svg>`;
    case 'clock':
      return `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><polyline points="12 6 12 12 16 14"/></svg>`;
    case 'monitor':
      return `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="20" height="14" x="2" y="3" rx="2"/><line x1="8" x2="16" y1="21" y2="21"/><line x1="12" x2="12" y1="17" y2="21"/></svg>`;
    case 'zap':
      return `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"/></svg>`;
    default:
      return `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" x2="12" y1="8" y2="16"></line><line x1="8" x2="16" y1="12" y2="12"></line></svg>`;
  }
};
---

<div class="tech-section">
  <div class="rounded-2xl border bg-card p-8 md:p-10 relative overflow-hidden">
    <!-- Visual background elements -->
    <div class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent opacity-50"></div>
    <div class="absolute -bottom-10 -right-10 w-40 h-40 bg-primary/10 rounded-full blur-xl opacity-50"></div>
    
    <div class="relative z-10">
      <!-- Section header with text effects -->
      <div class="max-w-2xl">
        <h3 class="text-2xl md:text-3xl font-bold mb-2 tech-title">
          Campus Technology
        </h3>
        <div class="w-20 h-1 bg-primary transform origin-left scale-x-0 tech-line"></div>
        <p class="mt-4 text-muted-foreground tech-description">
          Our campus is equipped with high-speed Wi-Fi throughout, smart classrooms with interactive displays, and digital learning tools to enhance the educational experience. We continuously upgrade our technology infrastructure to ensure students have access to industry-standard equipment and software.
        </p>
      </div>
      
      <!-- Tech stats with visual elements -->
      <div class="mt-8 grid grid-cols-2 md:grid-cols-4 gap-6 tech-stats">
        {stats.map((stat, index) => (
          <div class="tech-stat-card" style={`--delay: ${index * 100}ms`}>
            <div class="rounded-xl bg-background p-6 border border-border/50 text-center h-full flex flex-col items-center justify-center group hover:border-primary/30 hover:bg-primary/5 transition-all duration-300">
              <div class="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center text-primary mb-4 group-hover:bg-primary/20 transition-colors duration-300 tech-icon">
                <Fragment set:html={getIconSvg(stat.icon)} />
              </div>
              <p class="text-3xl font-bold mb-1 tech-value">{stat.value}</p>
              <p class="text-sm text-muted-foreground tech-label">{stat.label}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Animate tech section on scroll
    const techSection = document.querySelector('.tech-section');
    
    if (techSection) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Animate section elements
            const techTitle = techSection.querySelector('.tech-title');
            const techLine = techSection.querySelector('.tech-line');
            const techDescription = techSection.querySelector('.tech-description');
            
            if (techTitle) techTitle.classList.add('title-visible');
            
            if (techLine) {
              setTimeout(() => {
                techLine.classList.add('line-visible');
              }, 300);
            }
            
            if (techDescription) {
              setTimeout(() => {
                techDescription.classList.add('description-visible');
              }, 500);
            }
            
            // Animate stat cards with staggered delay
            const statCards = techSection.querySelectorAll('.tech-stat-card');
            statCards.forEach((card, i) => {
              setTimeout(() => {
                card.classList.add('stat-visible');
                
                // Animate stat elements
                const techIcon = card.querySelector('.tech-icon');
                const techValue = card.querySelector('.tech-value');
                const techLabel = card.querySelector('.tech-label');
                
                if (techIcon) techIcon.classList.add('icon-visible');
                
                if (techValue) {
                  techValue.classList.add('value-visible');
                  
                  // Animate counter for numeric values
                  const originalText = techValue.textContent;
                  const isNumeric = /^[0-9]+(\+|%)?$/.test(originalText);
                  
                  if (isNumeric) {
                    const targetValue = parseInt(originalText);
                    const suffix = originalText.match(/(\+|%)/)?.[0] || '';
                    
                    let currentValue = 0;
                    const duration = 1500; // ms
                    const increment = targetValue / (duration / 16); // 60fps
                    
                    const counter = setInterval(() => {
                      currentValue += increment;
                      
                      if (currentValue >= targetValue) {
                        techValue.textContent = targetValue + suffix;
                        clearInterval(counter);
                      } else {
                        techValue.textContent = Math.floor(currentValue) + suffix;
                      }
                    }, 16);
                  }
                }
                
                if (techLabel) {
                  setTimeout(() => {
                    techLabel.classList.add('label-visible');
                  }, 200);
                }
              }, 700 + (i * 100));
            });
            
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.1 });
      
      observer.observe(techSection);
    }
  });
</script>

<style>
  /* Title animations */
  .tech-title {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease, transform 0.5s ease;
  }
  
  .tech-title.title-visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Line animations */
  .tech-line {
    transition: transform 0.6s cubic-bezier(0.16, 1, 0.3, 1);
  }
  
  .tech-line.line-visible {
    transform: scaleX(1);
  }
  
  /* Description animations */
  .tech-description {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease, transform 0.5s ease;
  }
  
  .tech-description.description-visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Stat card animations */
  .tech-stat-card {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease, transform 0.5s ease;
    transition-delay: var(--delay, 0ms);
  }
  
  .tech-stat-card.stat-visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Icon animations */
  .tech-icon {
    opacity: 0;
    transform: scale(0.8);
    transition: opacity 0.5s ease, transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1), background-color 0.3s ease;
  }
  
  .tech-icon.icon-visible {
    opacity: 1;
    transform: scale(1);
  }
  
  /* Value animations */
  .tech-value {
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.5s ease, transform 0.5s ease;
  }
  
  .tech-value.value-visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Label animations */
  .tech-label {
    opacity: 0;
    transition: opacity 0.5s ease;
  }
  
  .tech-label.label-visible {
    opacity: 1;
  }
</style>
